// Generated by CoffeeScript 1.3.3
(function() {
  var C, L, name, op, postfix_ops, prefix_ops, regular_ops, _fn, _fn1, _fn2, _i, _j, _k, _len, _len1, _len2,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  L = lemur;

  C = L.Compiler;

  C.Operation = (function(_super) {

    __extends(Operation, _super);

    function Operation(_arg) {
      this.x = _arg[0], this.op = _arg[1], this.y = _arg[2];
      Operation.__super__.constructor.apply(this, arguments);
    }

    Operation.prototype.compile = function() {
      var c_x, c_y;
      c_x = this.x.compile();
      c_y = this.y.compile();
      return "" + c_x + " " + this.op + " " + c_y;
    };

    return Operation;

  })(C.Construct);

  C.PrefixOperation = (function(_super) {

    __extends(PrefixOperation, _super);

    function PrefixOperation(_arg) {
      this.x = _arg[0], this.op = _arg[1];
      PrefixOperation.__super__.constructor.apply(this, arguments);
    }

    PrefixOperation.prototype.compile = function() {
      var c_x;
      c_x = this.x.compile();
      return "" + this.op + c_x;
    };

    return PrefixOperation;

  })(C.Operation);

  C.PostfixOperation = (function(_super) {

    __extends(PostfixOperation, _super);

    function PostfixOperation(_arg) {
      this.x = _arg[0], this.op = _arg[1];
      PostfixOperation.__super__.constructor.apply(this, arguments);
    }

    PostfixOperation.prototype.compile = function() {
      var c_x;
      c_x = this.x.compile();
      return "" + c_x + this.op;
    };

    return PostfixOperation;

  })(C.Operation);

  regular_ops = {
    Add: "+",
    Subtract: "-",
    Multiply: "*",
    Divide: "/",
    Mod: "%",
    GT: ">",
    LT: "<",
    GTE: ">=",
    LTE: "<=",
    Eq3: "===",
    Eq2: "==",
    NotEq3: "!==",
    NotEq2: "!=",
    And: "&&",
    Or: "||",
    BAnd: "&",
    BOr: "|",
    BXor: "^",
    BLeftShift: "<<",
    BRightShift: ">>",
    BZeroFillRightShift: ">>>",
    Comma: ","
  };

  prefix_ops = {
    Not: "!",
    BNot: "~",
    PreIncr: "++",
    PreDecr: "--",
    Delete: "delete "
  };

  postfix_ops = {
    PostIncr: "++",
    PostDecr: "--"
  };

  _fn = function() {
    return C[name] = (function(_super) {

      __extends(_Class, _super);

      function _Class(_arg, yy) {
        var x, y;
        x = _arg[0], y = _arg[1];
        _Class.__super__.constructor.call(this, [x, op, y], yy);
      }

      return _Class;

    })(C.Operation);
  };
  for (op = _i = 0, _len = regular_ops.length; _i < _len; op = ++_i) {
    name = regular_ops[op];
    _fn();
  }

  _fn1 = function() {
    return C[name] = (function(_super) {

      __extends(_Class, _super);

      function _Class(x, yy) {
        _Class.__super__.constructor.call(this, [x, op], yy);
      }

      return _Class;

    })(C.PrefixOperation);
  };
  for (op = _j = 0, _len1 = prefix_ops.length; _j < _len1; op = ++_j) {
    name = prefix_ops[op];
    _fn1();
  }

  _fn2 = function() {
    return C[name] = (function(_super) {

      __extends(_Class, _super);

      function _Class(x, yy) {
        _Class.__super__.constructor.call(this, [x, op], yy);
      }

      return _Class;

    })(C.PostfixOperation);
  };
  for (op = _k = 0, _len2 = prefix_ops.length; _k < _len2; op = ++_k) {
    name = prefix_ops[op];
    _fn2();
  }

}).call(this);
