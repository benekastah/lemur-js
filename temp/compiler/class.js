// Generated by CoffeeScript 1.3.3
(function() {
  var C, L,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  L = lemur;

  C = L.Compiler;

  C.Class = (function(_super) {

    __extends(Class, _super);

    Class.prototype.anon_id = 0;

    function Class(config, yy) {
      var constructor, _ref, _ref1, _ref2;
      if (config == null) {
        config = {};
      }
      Class.__super__.constructor.apply(this, arguments);
      if (!config.hasOwnProperty('constructor')) {
        config.constructor = null;
      }
      this.name = config.name, constructor = config.constructor, this.prototype = config.prototype, this.statics = config.statics;
      if ((_ref = this.name) == null) {
        this.name = new C.String("Anonymous_$" + (id++) + "_");
      }
      this.class_constructor = constructor != null ? constructor : new C.Function({}, yy);
      if ((_ref1 = this.prototype) == null) {
        this.prototype = new C.Object([], yy);
      }
      if ((_ref2 = this.statics) == null) {
        this.statics = new C.Object([], yy);
      }
      this.class_constructor.name = this.name;
    }

    Class.prototype.object_compile = function(prefix, obj) {
      var pairs, prop, val;
      pairs = (function() {
        var _i, _len, _ref, _ref1, _results;
        _ref = obj.property_value_pairs;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          _ref1 = _ref[_i], prop = _ref1[0], val = _ref1[1];
          _results.push("" + prefix + "." + (prop.compile()) + " = " + (val.compile()));
        }
        return _results;
      })();
      return pairs.join(';\n  ');
    };

    Class.prototype.compile = function() {
      var proto, statics;
      statics = object_compile(this.name, this.statics);
      proto = object_compile("" + this.name + ".prototype", this.prototype);
      return "" + this.name + " = (function () {\n  " + (this.class_constructor.compile()) + ";\n  " + statics + ";\n  " + proto + ";\n  return " + this.name + ";\n})()";
    };

    return Class;

  })(C.Construct);

}).call(this);
