// Generated by CoffeeScript 1.3.3
(function() {
  var C, L,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  L = lemur;

  C = L.Compiler;

  C.Symbol = (function(_super) {

    __extends(Symbol, _super);

    function Symbol(name) {
      this.name = name;
      Symbol.__super__.constructor.apply(this, arguments);
    }

    Symbol.prototype.compile = function() {
      return C.Var.text_to_js_identifier(this.name);
    };

    Symbol.prototype.error_cant_redefine = function() {
      return this.error("Can't redefine var " + this.name);
    };

    Symbol.prototype.error_cant_set = function() {
      return this.error("Can't set nonexistant var " + this.name);
    };

    Symbol.gensym = function(s, yy) {
      var now, rand;
      if (s == null) {
        s = "sym";
      }
      now = (+new Date()).toString(36);
      rand = Math.floor(Math.random() * 1e6).toString(36);
      return new this("" + s + "-" + rand + "-" + now, yy);
    };

    Symbol.text_to_js_identifier = function(text, conversions) {
      var _char_wrapper;
      if ((this.JS_KEYWORDS.indexOf(text)) >= 0) {
        return this.wrapper(text);
      }
      if (text.length === 0) {
        return this.wrapper("null");
      }
      _char_wrapper = this.char_wrapper.bind(this, conversions);
      return ((text.replace(this.WRAPPER_REGEX, this.wrapper)).replace(/^\d/, _char_wrapper)).replace(/[^\w\$]/g, _char_wrapper);
    };

    Symbol.char_wrapper = function(conversions, _char) {
      var txt, _ref, _ref1;
      if (conversions == null) {
        conversions = {};
      }
      txt = (_ref = (_ref1 = conversions[_char]) != null ? _ref1 : this.JS_ILLEGAL_IDENTIFIER_CHARS[_char]) != null ? _ref : "ASCII_" + (_char.charCodeAt(0));
      return this.wrapper(txt);
    };

    Symbol.wrapper = function(text) {
      return "" + this.WRAPPER_PREFIX + text + this.WRAPPER_SUFFIX;
    };

    Symbol.WRAPPER_PREFIX = "_$";

    Symbol.WRAPPER_SUFFIX = "_";

    Symbol.WRAPPER_REGEX = /_\$[^_]+_/g;

    Symbol.JS_KEYWORDS = ["break", "case", "catch", "char", "class", "const", "continue", "debugger", "default", "delete", "do", "else", "enum", "export", "extends", "false", "finally", "for", "function", "if", "implements", "import", "in", "instanceof", "interface", "let", "new", "null", "package", "private", "protected", "public", "return", "static", "switch", "super", "this", "throw", "true", "try", "typeof", "undefined", "var", "void", "while", "with", "yield"];

    Symbol.JS_ILLEGAL_IDENTIFIER_CHARS = {
      "~": "tilde",
      "`": "backtick",
      "!": "exclamationmark",
      "@": "at",
      "#": "pound",
      "%": "percent",
      "^": "carat",
      "&": "amperstand",
      "*": "asterisk",
      "(": "leftparen",
      ")": "rightparen",
      "-": "dash",
      "+": "plus",
      "=": "equals",
      "{": "leftcurly",
      "}": "rightcurly",
      "[": "leftsquare",
      "]": "rightsquare",
      "|": "pipe",
      "\\": "backslash",
      "\"": "doublequote",
      "'": "singlequote",
      ":": "colon",
      ";": "semicolon",
      "<": "leftangle",
      ">": "rightangle",
      ",": "comma",
      ".": "period",
      "?": "questionmark",
      "/": "forwardslash",
      " ": "space",
      "\t": "tab",
      "\n": "newline",
      "\r": "carriagereturn"
    };

    return Symbol;

  })(C.Construct);

  C.Var = (function(_super) {

    __extends(Var, _super);

    function Var(name) {
      var scope;
      this.name = name;
      Var.__super__.constructor.apply(this, arguments);
      scope = C.Scope.current_scope();
      if (!scope.var_defined(this)) {
        scope.def_var(this);
      }
    }

    Var.gensym = function() {
      var sym;
      sym = Var.__super__.constructor.gensym.apply(this, arguments);
      return new this(sym.name);
    };

    return Var;

  })(C.Symbol);

  C.Var.Set = (function(_super) {

    __extends(Set, _super);

    function Set(_arg) {
      var scope;
      this["var"] = _arg["var"], this.value = _arg.value;
      scope = C.Scope.find_scope_with_var(this["var"]);
      if (!scope) {
        this["var"].error_cant_set();
      }
      Set.__super__.constructor.apply(this, arguments);
    }

    Set.prototype.compile = function() {
      var c_val, c_var;
      c_var = this["var"].compile();
      c_val = this.value.compile();
      return "" + c_var + " = " + c_val;
    };

    return Set;

  })(C.Construct);

}).call(this);
