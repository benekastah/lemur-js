// Generated by CoffeeScript 1.3.3
(function() {
  var C, L,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __slice = [].slice;

  L = lemur;

  C = L.Compiler;

  C.Object = (function(_super) {

    __extends(Object, _super);

    function Object(o) {
      if (o == null) {
        o = [];
      }
      Object.__super__.constructor.apply(this, arguments);
      this.property_value_pairs = o;
    }

    Object.prototype.compile = function() {
      var pairs, prop, val;
      pairs = (function() {
        var _i, _len, _ref, _ref1, _results;
        _ref = this.property_value_pairs;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          _ref1 = _ref[_i], prop = _ref1[0], val = _ref1[1];
          _results.push("" + (prop.compile()) + ": " + (val.compile()));
        }
        return _results;
      }).call(this);
      return "{ " + (pairs.join(',\n  ')) + " }";
    };

    return Object;

  })(C.Construct);

  C.ProperyAccess = (function(_super) {

    __extends(ProperyAccess, _super);

    function ProperyAccess(_arg) {
      this.obj = _arg[0], this.props = 2 <= _arg.length ? __slice.call(_arg, 1) : [];
      ProperyAccess.__super__.constructor.apply(this, arguments);
    }

    ProperyAccess.prototype.compile = function() {
      var base, c_prop, prop, _i, _len, _ref, _results;
      base = this.obj.compile();
      _ref = this.props;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        prop = _ref[_i];
        c_prop = prop.compile();
        if (prop instanceof C.Var) {
          _results.push(base = "" + base + "." + c_prop);
        } else {
          _results.push(base = "" + base + "[" + c_prop + "]");
        }
      }
      return _results;
    };

    return ProperyAccess;

  })(C.Construct);

}).call(this);
