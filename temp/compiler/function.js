// Generated by CoffeeScript 1.3.3
(function() {
  var C, L,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  L = lemur;

  C = L.Compiler;

  C.Function = (function(_super) {

    __extends(Function, _super);

    function Function(_arg) {
      var _ref, _ref1, _ref2;
      this.name = _arg.name, this.args = _arg.args, this.body = _arg.body, this.autoreturn = _arg.autoreturn;
      if ((_ref = this.name) == null) {
        this.name = '';
      }
      if ((_ref1 = this.args) == null) {
        this.args = [];
      }
      if ((_ref2 = this.body) == null) {
        this.body = [];
      }
      Function.__super__.constructor.apply(this, arguments);
    }

    Function.prototype.compile = function() {
      var arg, c_args, c_body, i, last_stmt_index, scope, stmt, var_stmt, vars, _var;
      scope = C.Scope.new_scope();
      c_args = (function() {
        var _i, _len, _ref, _results;
        _ref = this.args;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          arg = _ref[_i];
          _results.push(arg.compile());
        }
        return _results;
      }).call(this);
      last_stmt_index = this.body.length - 1;
      if (this.autoreturn) {
        c_body = (function() {
          var _i, _len, _ref, _results;
          _ref = this.body;
          _results = [];
          for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
            stmt = _ref[i];
            if (i === last_stmt_index) {
              stmt = stmt.should_return();
            }
            _results.push(stmt.compile());
          }
          return _results;
        }).call(this);
      }
      vars = (function() {
        var _i, _len, _ref, _results;
        _ref = scope.vars;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          _var = _ref[_i];
          _results.push(_var.compile());
        }
        return _results;
      })();
      var_stmt = vars.length ? "var " + (vars.join(', ')) + ";\n  " : '';
      return "(function " + this.name + "(" + (c_args.join(", ")) + ") {\n  " + var_stmt + (c_body.join(";\n  ")) + ";\n})";
    };

    return Function;

  })(C.Construct);

}).call(this);
