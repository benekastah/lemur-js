// Generated by CoffeeScript 1.3.3
(function() {
  var C, JisonParser, L, Parser, core, root, _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __slice = [].slice;

  root = typeof global !== "undefined" && global !== null ? global : window;

  root.root = root;

  L = {};

  root.lemur = L;

  core = L.core = {};

  L.compiler = {};

  (function() {
    var toString;
    toString = Object.prototype.toString;
    return core.to_type = function(o) {
      var s;
      s = toString.call(o);
      s = s.substring(8, s.length - 1);
      return s.toLowerCase();
    };
  })();

  core.s_trim = (_ref = String.prototype.trim) != null ? _ref : function() {
    return String(this).replace(/^\s+/, '').replace(/\s+$/, '');
  };

  (function() {
    var Noop, _ref1;
    Noop = function() {};
    return core.clone = (_ref1 = Object.create) != null ? _ref1 : function(o) {
      Noop.prototype = o;
      return new Noop();
    };
  })();

  if ((typeof process !== "undefined" && process !== null ? process.title : void 0) === "node") {
    require("./compiler");
    require("./parser");
  }

  if ((typeof exports !== "undefined" && exports !== null) && (typeof module !== "undefined" && module !== null)) {
    module.exports = L;
  } else if (typeof provide !== "undefined" && provide !== null) {
    provide("lemur", L);
  }

  if ((typeof process !== "undefined" && process !== null ? process.title : void 0) === "node") {
    require('coffee-script');
    L = require('../core');
    JisonParser = (require('jison')).Parser;
    Parser = (function(_super) {

      __extends(Parser, _super);

      Parser.prototype.re = {
        lex_return: /^(return|function)/,
        "function": /^function/,
        strip_function: /^function\s*\([\w,]*\)\s*/,
        unwrap_function: /^function\s*\(\)\s*\{\s*return\s*([\s\S]*);\s*\}/,
        whitespace: /\s+/g,
        regex_special: /[\^\$\*\+\?\.\(\)\|\{\}\[\]\\\/]/g,
        comment: /^\/\*.*\*\//,
        jison_special: /\<\<\w+\>\>/
      };

      function Parser(_arg) {
        var alternatives, entry, grammar, lexer, name, operators, rule, _i, _j, _len, _len1;
        lexer = _arg.lexer, operators = _arg.operators, grammar = _arg.grammar, this.start = _arg.start;
        this.lexer = {
          rules: []
        };
        this.grammar = {};
        this.operators = [];
        if (lexer != null) {
          for (_i = 0, _len = lexer.length; _i < _len; _i++) {
            rule = lexer[_i];
            this.lex_rule.apply(this, rule);
          }
        }
        if (operators != null) {
          for (_j = 0, _len1 = operators.length; _j < _len1; _j++) {
            entry = operators[_j];
            this.operator_rule(entry);
          }
        }
        if (grammar != null) {
          for (name in grammar) {
            if (!__hasProp.call(grammar, name)) continue;
            alternatives = grammar[name];
            this.grammar_rule.apply(this, [name].concat(__slice.call(alternatives)));
          }
        }
        this.parser = new JisonParser({
          lex: this.lexer,
          operators: this.operators,
          bnf: this.grammar,
          startSymbol: this.start
        });
      }

      Parser.prototype.lex_rule = function(pattern, ret) {
        var jison_pattern, jison_ret;
        if (L.core.to_type(pattern) === 'regexp') {
          jison_pattern = pattern.source;
        } else if (!this.re.jison_special.test(pattern)) {
          jison_pattern = pattern.replace(this.re.regex_special, "\\$&");
        }
        if (!(ret != null)) {
          jison_ret = pattern;
        }
        if (L.core.to_type(ret) !== 'string') {
          ret = String(ret);
        }
        jison_ret = L.core.s_trim.call(ret);
        if (!this.re.comment.test(jison_ret)) {
          if (!this.re.lex_return.test(jison_ret)) {
            jison_ret = "return '" + jison_ret + "';";
          } else if (this.re.lex_function.test(jison_ret)) {
            jison_ret = jison_ret.replace(this.re.strip_function, '');
          }
        }
        return this.lexer.rules.push([jison_pattern, jison_ret]);
      };

      Parser.prototype.grammar_rule = function() {
        var action, alt, alternatives, jison_action, match, name, options, pattern;
        name = arguments[0], alternatives = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
        return this.grammar[name] = (function() {
          var _i, _len, _results;
          _results = [];
          for (_i = 0, _len = alternatives.length; _i < _len; _i++) {
            alt = alternatives[_i];
            pattern = alt[0], action = alt[1], options = alt[2];
            if (action != null) {
              action = (match = this.re.unwrap_function.exec(action)) ? match[1] : "(" + action + "())";
              jison_action = "$$ = " + action + ";";
            } else {
              jison_action = "$$ = $1;";
            }
            if (name === this.start) {
              jison_action += " return $$;";
            }
            _results.push([pattern, jison_action, options]);
          }
          return _results;
        }).call(this);
      };

      Parser.prototype.operator_rule = function() {
        var op1, ops;
        ops = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        if (ops.length === 1) {
          ops = ops[0];
        }
        if (L.core.to_type(ops) === 'string') {
          ops = ops.split(this.re.whitespace);
        }
        if (ops.length === 2) {
          op1 = ops.pop().split(this.re.whitespace);
          ops = ops.concat(op1);
        }
        return this.operators.push(ops);
      };

      return Parser;

    })(JisonParser);
    L.parser = function(config) {
      return (new Parser(config)).parser;
    };
    if (typeof exports !== "undefined" && exports !== null) {
      if (typeof module !== "undefined" && module !== null) {
        module.exports = L.parser;
      }
    }
  }

  L = lemur;

  C = L.compiler;

  C.Construct = (function() {

    function Construct(__, yy_or_node_or_num) {
      var _ref1;
      if (yy_or_node_or_num instanceof Construct) {
        this.transfer_node = yy_or_node_or_num;
        this.yy = yy_or_node_or_num.yy;
      } else if ((L.core.to_type(yy_or_node_or_num)) === "number") {
        this.yy = {
          lexer: {
            yylineno: yy_or_node_or_num
          }
        };
      } else {
        this.yy = yy_or_node_or_num;
      }
      this.line_number = (_ref1 = this.yy) != null ? _ref1.lexer.yylineno : void 0;
    }

    Construct.prototype.compile = function() {
      if (this.value != null) {
        return "" + this.value;
      } else {
        return "null";
      }
    };

    Construct.prototype.error = function(message) {
      var filename, location, type;
      filename = C.current_filename;
      location = "";
      type = "";
      if (filename != null) {
        location += " in " + filename;
      }
      if (this.line_number != null) {
        location += " at line " + this.line_number;
      }
      if (this.constructor.name != null) {
        type = "" + this.constructor.name;
      }
      throw "" + type + "Error" + location + ": " + message;
    };

    Construct.prototype.should_return = function() {
      var Construct, ReturnedConstruct;
      Construct = function() {};
      Construct.prototype = this;
      ReturnedConstruct = (function(_super) {

        __extends(ReturnedConstruct, _super);

        function ReturnedConstruct() {
          return ReturnedConstruct.__super__.constructor.apply(this, arguments);
        }

        ReturnedConstruct.prototype.compile = function() {
          return "return " + ReturnedConstruct.__super__.compile.apply(this, arguments);
        };

        return ReturnedConstruct;

      })(Construct);
      return new ReturnedConstruct();
    };

    return Construct;

  })();

  L = lemur;

  C = L.compiler;

  C.Array = (function(_super) {

    __extends(Array, _super);

    function Array(items) {
      this.items = items;
      Array.__super__.constructor.apply(this, arguments);
    }

    Array.prototype.compile = function() {
      var c_items, item;
      c_items = (function() {
        var _i, _len, _ref1, _results;
        _ref1 = this.items;
        _results = [];
        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
          item = _ref1[_i];
          _results.push(item.compile());
        }
        return _results;
      }).call(this);
      return "[" + (c_items.join(', ')) + "]";
    };

    return Array;

  })(C.Construct);

  L = lemur;

  C = L.compiler;

  C.Class = (function(_super) {

    __extends(Class, _super);

    Class.prototype.anon_id = 0;

    function Class(config, yy) {
      var constructor, _ref1, _ref2, _ref3;
      if (config == null) {
        config = {};
      }
      Class.__super__.constructor.apply(this, arguments);
      if (!config.hasOwnProperty('constructor')) {
        config.constructor = null;
      }
      this.name = config.name, constructor = config.constructor, this.prototype = config.prototype, this.statics = config.statics;
      if ((_ref1 = this.name) == null) {
        this.name = new C.String("Anonymous_$" + (id++) + "_");
      }
      this.class_constructor = constructor != null ? constructor : new C.Function({}, yy);
      if ((_ref2 = this.prototype) == null) {
        this.prototype = new C.Object([], yy);
      }
      if ((_ref3 = this.statics) == null) {
        this.statics = new C.Object([], yy);
      }
      this.class_constructor.name = this.name;
    }

    Class.prototype.object_compile = function(prefix, obj) {
      var pairs, prop, val;
      pairs = (function() {
        var _i, _len, _ref1, _ref2, _results;
        _ref1 = obj.property_value_pairs;
        _results = [];
        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
          _ref2 = _ref1[_i], prop = _ref2[0], val = _ref2[1];
          _results.push("" + prefix + "." + (prop.compile()) + " = " + (val.compile()));
        }
        return _results;
      })();
      return pairs.join(';\n  ');
    };

    Class.prototype.compile = function() {
      var proto, statics;
      statics = object_compile(this.name, this.statics);
      proto = object_compile("" + this.name + ".prototype", this.prototype);
      return "" + this.name + " = (function () {\n  " + (this.class_constructor.compile()) + ";\n  " + statics + ";\n  " + proto + ";\n  return " + this.name + ";\n})()";
    };

    return Class;

  })(C.Construct);

  L = lemur;

  C = L.compiler;

  C.Function = (function(_super) {

    __extends(Function, _super);

    function Function(_arg) {
      var _ref1, _ref2, _ref3;
      this.name = _arg.name, this.args = _arg.args, this.body = _arg.body;
      if ((_ref1 = this.name) == null) {
        this.name = '';
      }
      if ((_ref2 = this.args) == null) {
        this.args = [];
      }
      if ((_ref3 = this.body) == null) {
        this.body = [];
      }
      Function.__super__.constructor.apply(this, arguments);
    }

    Function.prototype.compile = function() {
      var arg, c_args, c_body, i, last_stmt_index, scope, stmt, var_stmt, vars, _var;
      scope = C.Scope.new_scope();
      c_args = (function() {
        var _i, _len, _ref1, _results;
        _ref1 = this.args;
        _results = [];
        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
          arg = _ref1[_i];
          _results.push(arg.compile());
        }
        return _results;
      }).call(this);
      last_stmt_index = this.body.length - 1;
      c_body = (function() {
        var _i, _len, _ref1, _results;
        _ref1 = this.body;
        _results = [];
        for (i = _i = 0, _len = _ref1.length; _i < _len; i = ++_i) {
          stmt = _ref1[i];
          if (i === last_stmt_index) {
            stmt = stmt.should_return();
          }
          _results.push(stmt.compile());
        }
        return _results;
      }).call(this);
      vars = (function() {
        var _i, _len, _ref1, _results;
        _ref1 = scope.vars;
        _results = [];
        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
          _var = _ref1[_i];
          _results.push(_var.compile());
        }
        return _results;
      })();
      var_stmt = vars.length ? "var " + (vars.join(', ')) + ";\n  " : '';
      return "(function " + this.name + "(" + (c_args.join(", ")) + ") {\n  " + var_stmt + (c_body.join(";\n  ")) + ";\n})";
    };

    return Function;

  })(C.Construct);

  L = lemur;

  C = L.compiler;

  L.Null = (function(_super) {

    __extends(Null, _super);

    function Null() {
      return Null.__super__.constructor.apply(this, arguments);
    }

    Null.prototype.compile = function() {
      return "null";
    };

    return Null;

  })(C.Construct);

  L.Undefined = (function(_super) {

    __extends(Undefined, _super);

    function Undefined() {
      return Undefined.__super__.constructor.apply(this, arguments);
    }

    Undefined.prototype.compile = function() {
      return "void(0)";
    };

    return Undefined;

  })(C.Construct);

  L = lemur;

  C = L.compiler;

  C.Number = (function(_super) {

    __extends(Number, _super);

    function Number(n) {
      Number.__super__.constructor.apply(this, arguments);
      this.value = Number(n);
    }

    Number.prototype.compile = function() {
      return "" + this.value;
    };

    return Number;

  })(C.Construct);

  L = lemur;

  C = L.compiler;

  C.Object = (function(_super) {

    __extends(Object, _super);

    function Object(o) {
      if (o == null) {
        o = [];
      }
      Object.__super__.constructor.apply(this, arguments);
      this.property_value_pairs = o;
    }

    Object.prototype.compile = function() {
      var pairs, prop, val;
      pairs = (function() {
        var _i, _len, _ref1, _ref2, _results;
        _ref1 = this.property_value_pairs;
        _results = [];
        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
          _ref2 = _ref1[_i], prop = _ref2[0], val = _ref2[1];
          _results.push("" + (prop.compile()) + ": " + (val.compile()));
        }
        return _results;
      }).call(this);
      return "{ " + (pairs.join(',\n  ')) + " }";
    };

    return Object;

  })(C.Construct);

  L = lemur;

  C = L.compiler;

  C.Regex = (function(_super) {

    __extends(Regex, _super);

    function Regex(_arg) {
      this.pattern = _arg.pattern, this.modifiers = _arg.modifiers;
      Regex.__super__.constructor.apply(this, arguments);
    }

    Regex.prototype.compile = function() {
      return "/" + this.pattern + "/" + this.modifiers;
    };

    return Regex;

  })(C.Construct);

  L = lemur;

  C = L.compiler;

  C.Scope = (function() {

    function Scope() {
      this.last_scope = Scope.current_scope();
      this.vars = [];
      Scope.push_scope(this);
    }

    Scope.prototype.def_var = function(_var) {
      var v, _i, _len, _ref1;
      _ref1 = this.vars;
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        v = _ref1[_i];
        if (v.name === _var.name) {
          _var.error_cant_redefine();
        }
      }
      return this.vars.push(_var);
    };

    Scope.prototype.var_defined = function(_var) {
      var found, v, _i, _len, _ref1;
      _ref1 = this.vars;
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        v = _ref1[_i];
        if (v.name === _var.name) {
          found = true;
          break;
        }
      }
      if (!found) {
        if (this.last_scope != null) {
          return this.last_scope.set_var(_var);
        } else {
          return false;
        }
      }
    };

    Scope.prototype.set_var = function(_var) {
      if (!this.var_defined(_var)) {
        return _var.error_cant_set();
      }
    };

    Scope.new_scope = function() {
      return this.push_scope(new C.Scope());
    };

    Scope.push_scope = function(scope) {
      this.stack.push(scope);
      return scope;
    };

    Scope.pop_scope = function() {
      return this.stack.pop();
    };

    Scope.current_scope = function() {
      return this.stack[this.stack.length - 1];
    };

    Scope.stack = [];

    Scope.global_scope = new Scope();

    return Scope;

  })();

  L = lemur;

  C = L.compiler;

  C.String = (function(_super) {

    __extends(String, _super);

    function String(value) {
      this.value = value;
      String.__super__.constructor.apply(this, arguments);
    }

    String.prototype.compile = function() {
      var value;
      value = this.value.replace(/'/, "\\'");
      return "'" + value + "'";
    };

    return String;

  })(C.Construct);

  L = lemur;

  C = L.compiler;

  C.Var = (function(_super) {

    __extends(Var, _super);

    function Var(name) {
      var scope;
      this.name = name;
      Var.__super__.constructor.apply(this, arguments);
      scope = C.Scope.current_scope();
      if (!scope.var_defined(this)) {
        scope.def_var(this);
      }
    }

    Var.prototype.compile = function() {
      return C.Var.text_to_js_identifier(this.name);
    };

    Var.prototype.error_cant_redefine = function() {
      return this.error("Can't redefine var " + this.name);
    };

    Var.prototype.error_cant_set = function() {
      return this.error("Can't set nonexistant var " + this.name);
    };

    Var.text_to_js_identifier = function(text, conversions) {
      var _char_wrapper;
      if ((this.JS_KEYWORDS.indexOf(text)) >= 0) {
        return this.wrapper(text);
      }
      if (text.length === 0) {
        return this.wrapper("null");
      }
      _char_wrapper = this.char_wrapper.bind(this, conversions);
      return ((text.replace(this.WRAPPER_REGEX, this.wrapper)).replace(/^\d/, _char_wrapper)).replace(/[^\w\$]/g, _char_wrapper);
    };

    Var.char_wrapper = function(conversions, _char) {
      var txt, _ref1, _ref2;
      if (conversions == null) {
        conversions = {};
      }
      txt = (_ref1 = (_ref2 = conversions[_char]) != null ? _ref2 : this.JS_ILLEGAL_IDENTIFIER_CHARS[_char]) != null ? _ref1 : "ASCII_" + (_char.charCodeAt(0));
      return this.wrapper(txt);
    };

    Var.wrapper = function(text) {
      return "" + this.WRAPPER_PREFIX + text + this.WRAPPER_SUFFIX;
    };

    Var.WRAPPER_PREFIX = "_$";

    Var.WRAPPER_SUFFIX = "_";

    Var.WRAPPER_REGEX = /_\$[^_]+_/g;

    Var.JS_KEYWORDS = ["break", "case", "catch", "char", "class", "const", "continue", "debugger", "default", "delete", "do", "else", "enum", "export", "extends", "false", "finally", "for", "function", "if", "implements", "import", "in", "instanceof", "interface", "let", "new", "null", "package", "private", "protected", "public", "return", "static", "switch", "super", "this", "throw", "true", "try", "typeof", "undefined", "var", "void", "while", "with", "yield"];

    Var.JS_ILLEGAL_IDENTIFIER_CHARS = {
      "~": "tilde",
      "`": "backtick",
      "!": "exclamationmark",
      "@": "at",
      "#": "pound",
      "%": "percent",
      "^": "carat",
      "&": "amperstand",
      "*": "asterisk",
      "(": "leftparen",
      ")": "rightparen",
      "-": "dash",
      "+": "plus",
      "=": "equals",
      "{": "leftcurly",
      "}": "rightcurly",
      "[": "leftsquare",
      "]": "rightsquare",
      "|": "pipe",
      "\\": "backslash",
      "\"": "doublequote",
      "'": "singlequote",
      ":": "colon",
      ";": "semicolon",
      "<": "leftangle",
      ">": "rightangle",
      ",": "comma",
      ".": "period",
      "?": "questionmark",
      "/": "forwardslash",
      " ": "space",
      "\t": "tab",
      "\n": "newline",
      "\r": "carriagereturn"
    };

    return Var;

  })(C.Construct);

}).call(this);
